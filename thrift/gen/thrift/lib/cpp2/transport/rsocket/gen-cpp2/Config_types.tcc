/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "thrift/lib/cpp2/transport/rsocket/gen-cpp2/Config_types.h"

#include <thrift/lib/cpp2/GeneratedSerializationCodeHelper.h>
#include <thrift/lib/cpp2/gen/module_types_tcc.h>

#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
#include <thrift/lib/cpp2/protocol/ProtocolReaderStructReadState.h>


namespace apache {
namespace thrift {
namespace detail {

template <>
struct TccStructTraits<::apache::thrift::RSocketSetupParameters> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift {

template <class Protocol_>
void RSocketSetupParameters::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  if (_readState.fieldType == apache::thrift::protocol::T_STOP) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    apache::thrift::detail::TccStructTraits<RSocketSetupParameters>::translateFieldName(_readState.fieldName(), _readState.fieldId, _readState.fieldType);
  }

  switch (_readState.fieldId) {
    default:
    {
      iprot->skip(_readState.fieldType);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t RSocketSetupParameters::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("RSocketSetupParameters");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t RSocketSetupParameters::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("RSocketSetupParameters");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t RSocketSetupParameters::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("RSocketSetupParameters");
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void RSocketSetupParameters::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t RSocketSetupParameters::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t RSocketSetupParameters::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t RSocketSetupParameters::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void RSocketSetupParameters::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t RSocketSetupParameters::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t RSocketSetupParameters::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t RSocketSetupParameters::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // apache::thrift
